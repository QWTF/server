// XTF2
//entity (float rangeDist) buildTargetList;
//entity (entity targList) sortListFrom; // only in United :)
// XTF2_end
void(float normal) SUB_AttackFinished;
//float()	WizardCheckAttack;
float()	DogCheckAttack;
//float()	SoldierCheckAttack;
//float()	ShamCheckAttack;
//float()	DemonCheckAttack;
//float()	OgreCheckAttack;
float()	CheckAttack;

float	current_yaw;
float	enemy_vis, enemy_infront, enemy_range;
float	enemy_yaw;

entity sight_entity;
float sight_entity_time;


float(float v) anglemod = 
{
	while (v >= 360)
	{
		v = v - 360;
	}
	while (v < TF_FLARE_LIT)
	{
		v = v + 360;
	}
	return v;
};

void() t_movetarget = 
{
	local entity temp;
	if (other.movetarget != self)
	{
		return;
	}
	if (other.enemy)
	{
		return;
	}
	temp = self;
	self = other;
	other = temp;
	if (self.classname == "monster_ogre")
	{
		sound(self, 2, "ogre/ogdrag.wav", TF_FLARE_OFF, 2);
	}
	self.goalentity = self.movetarget = find(world, targetname, other.target);
	self.ideal_yaw = vectoyaw(self.goalentity.origin - self.origin);
	if (!(self.movetarget))
	{
		self.pausetime = time + 999999;
		self.th_stand();
		return;
	}
};

void() movetarget_f = 
{
	if (!(self.targetname))
	{
		objerror("monster_movetarget: no targetname");
	}
	self.solid = TF_FLARE_OFF;
	self.touch = t_movetarget;
	setsize(self, '-8 -8 -8', '8 8 8');
};

void() path_corner = 
{
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	movetarget_f();
};



float(entity targ) range = 
{
	local vector spot1;
	local vector spot2;
	local float r;
	spot1 = self.origin + self.view_ofs;
	spot2 = targ.origin + targ.view_ofs;
	r = vlen(spot1 - spot2);
	if (r < 120)
	{
		return TF_FLARE_LIT;
	}
	if (r < 500)
	{
		return TF_FLARE_OFF;
	}
	if (r < 1000)
	{
		return 2;
	}
	return 3;
};

float(entity targ) infront = 
{
	local vector vec;
	local float dot;
	makevectors(self.angles);
	vec = normalize(targ.origin - self.origin);
	dot = vec * v_forward;
	if (dot > 0.3)
	{
		return TF_FLARE_OFF;
	}
	return TF_FLARE_LIT;
};

void() HuntTarget = 
{
	self.goalentity = self.enemy;
	self.think = self.th_run;
	self.ideal_yaw = vectoyaw(self.enemy.origin - self.origin);
	self.nextthink = time + 0.1;
	SUB_AttackFinished(TF_FLARE_OFF);
};

void() SightSound = 
{
	local float rsnd;
	if (self.classname == "monster_ogre")
	{
		sound(self, 2, "ogre/ogwake.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	}
	else
	{
		if (self.classname == "monster_knight")
		{
			sound(self, 2, "knight/ksight.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		else
		{
			if (self.classname == "monster_shambler")
			{
				sound(self, 2, "shambler/ssight.wav", TF_FLARE_OFF, TF_FLARE_OFF);
			}
			else
			{
				if (self.classname == "monster_demon1")
				{
					sound(self, 2, "demon/sight2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
				}
				else
				{
					if (self.classname == "monster_wizard")
					{
						sound(self, 2, "wizard/wsight.wav", TF_FLARE_OFF, TF_FLARE_OFF);
					}
					else
					{
						if (self.classname == "monster_zombie")
						{
							sound(self, 2, "zombie/z_idle.wav", TF_FLARE_OFF, TF_FLARE_OFF);
						}
						else
						{
							if (self.classname == "monster_dog")
							{
								sound(self, 2, "dog/dsight.wav", TF_FLARE_OFF, TF_FLARE_OFF);
							}
							else
							{
								if (self.classname == "monster_hell_knight")
								{
									sound(self, 2, "hknight/sight1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
								}
								else
								{
									if (self.classname == "monster_tarbaby")
									{
										sound(self, 2, "blob/sight1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
									}
									else
									{
										if (self.classname == "monster_vomit")
										{
											sound(self, 2, "vomitus/v_sight1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
										}
										else
										{
											if (self.classname == "monster_enforcer")
											{
												rsnd = rint(random() * 3);
												if (rsnd == TF_FLARE_OFF)
												{
													sound(self, 2, "enforcer/sight1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
												}
												else
												{
													if (rsnd == 2)
													{
														sound(self, 2, "enforcer/sight2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
													}
													else
													{
														if (rsnd == TF_FLARE_LIT)
														{
															sound(self, 2, "enforcer/sight3.wav", TF_FLARE_OFF, TF_FLARE_OFF);
														}
														else
														{
															sound(self, 2, "enforcer/sight4.wav", TF_FLARE_OFF, TF_FLARE_OFF);
														}
													}
												}
											}
											else
											{
												if (self.classname == "monster_army")
												{
													sound(self, 2, "soldier/sight1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
												}
												else
												{
													if (self.classname == "monster_shalrath")
													{
														sound(self, 2, "shalrath/sight.wav", TF_FLARE_OFF, TF_FLARE_OFF);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};

void() FoundTarget = 
{                   
	if (self.enemy.classname == "player" || self.enemy.classname == "bot" || self.enemy.classname == "monster_dog" || self.enemy.classname == "monster_fish")
	{
		sight_entity = self;
		sight_entity_time = time;
	}
	self.show_hostile = time + TF_FLARE_OFF;
	SightSound();
	HuntTarget();
};

float () FindTarget =
{
	local entity _l_8271;
	local float _l_8273;

	if (((sight_entity_time >= (time - 0.1)) && !(self.spawnflags & 3)))
	{
		_l_8271 = sight_entity;
		if ((_l_8271.enemy == self.enemy))
		{
			return (0);
		}
	}
	else
	{
		_l_8271 = checkclient ();
		if ((!_l_8271 && (_l_8271.classname != "bot")))
		{
			return (0);
		}
	}
	if ((_l_8271 == self.enemy))
	{
		return (0);
	}
	if ((_l_8271.flags & 128))
	{
		return (0);
	}
	if ((_l_8271.items & 524288))
	{
		return (0);
	}
	if ((_l_8271.team_no == self.team_no))
	{
		return (0);
	}
	if (((_l_8271.undercover_team == self.team_no) && (_l_8271.playerclass == 8)))
	{
		return (0);
	}
	_l_8273 = range (_l_8271);
	if ((_l_8273 == 3))
	{
		return (0);
	}
	if (!visible (_l_8271))
	{
		return (0);
	}
	if ((_l_8273 == 1))
	{
		if (((_l_8271.show_hostile < time) && !infront (_l_8271)))
		{
			return (0);
		}
	}
	else
	{
		if ((_l_8273 == 2))
		{
			if (!infront (_l_8271))
			{
				return (0);
			}
		}
	}
	self.enemy = _l_8271;
	if ((((self.enemy.classname != "player") && (self.enemy.classname != "bot")) && (self.enemy.classname != "monster_dog")))
	{
		self.enemy = self.enemy.enemy;
		if ((((self.enemy.classname != "player") && (self.enemy.classname != "bot")) && (self.enemy.classname != "monster_dog")))
		{
			self.enemy = world;
			return (0);
		}
	}
	FoundTarget ();
	return (1);
};

void(float dist) ai_forward = 
{
	walkmove(self.angles_y, dist);
};

void(float dist) ai_back = 
{
	walkmove(self.angles_y + 180, dist);
};

void(float dist) ai_pain = 
{
	ai_back(dist);
};

void(float dist) ai_painforward = 
{
	walkmove(self.ideal_yaw, dist);
};

void(float dist) ai_walk = 
{
	movedist = dist;
	if (self.classname == "monster_dragon")
	{
		movetogoal(dist);
		return;
	}
	if (FindTarget())
	{
		return;
	}
	movetogoal(dist);
};

void() ai_stand = 
{
	if (FindTarget())
	{
		return;
	}
	if (time > self.pausetime)
	{
		self.th_walk();
		return;
	}
};

void() ai_turn = 
{
	if (FindTarget())
	{
		return;
	}
	ChangeYaw();
};

void(vector dest3) ChooseTurn = 
{
	local vector dir;
	local vector newdir;
	dir = self.origin - dest3;
	newdir_x = trace_plane_normal_y;
	newdir_y = TF_FLARE_LIT - trace_plane_normal_x;
	newdir_z = TF_FLARE_LIT;
	if (dir * newdir > TF_FLARE_LIT)
	{
		dir_x = TF_FLARE_LIT - trace_plane_normal_y;
		dir_y = trace_plane_normal_x;
	}
	else
	{
		dir_x = trace_plane_normal_y;
		dir_y = TF_FLARE_LIT - trace_plane_normal_x;
	}
	dir_z = TF_FLARE_LIT;
	self.ideal_yaw = vectoyaw(dir);
};

float() FacingIdeal = 
{
	local float delta;
	delta = anglemod(self.angles_y - self.ideal_yaw);
	if (delta > 45 && delta < 315)
	{
		return TF_FLARE_LIT;
	}
	return TF_FLARE_OFF;
};

float() CheckAnyAttack = 
{
	if (!enemy_vis)
	{
		return 0;
	}
	if (self.classname == "monster_dog")
	{
		return DogCheckAttack();
	}
	if (self.classname == "bot")
	{
		return DogCheckAttack();
	}
	return CheckAttack();
};

void() ai_run_melee = 
{
	self.ideal_yaw = enemy_yaw;
	ChangeYaw();
	if (FacingIdeal())
	{
		self.th_melee();
		self.attack_state = TF_FLARE_OFF;
	}
};

void() ai_run_missile = 
{
	self.ideal_yaw = enemy_yaw;
	ChangeYaw();
	if (FacingIdeal())
	{
		self.th_missile();
		self.attack_state = TF_FLARE_OFF;
	}
};

void() ai_run_slide = 
{
	local float ofs;
	self.ideal_yaw = enemy_yaw;
	ChangeYaw();
	if (self.lefty)
	{
		ofs = 90;
	}
	else
	{
		ofs = -90;
	}
	if (walkmove(self.ideal_yaw + ofs, movedist))
	{
		return;
	}
	self.lefty = TF_FLARE_OFF - self.lefty;
	walkmove(self.ideal_yaw - ofs, movedist);
};

void(float dist) ai_run = 
{
	movedist = dist;
	if (self.enemy.health <= TF_FLARE_LIT || self.playerclass == self.enemy.team_no)
	{
		self.enemy = world;
		if (self.oldenemy.health > TF_FLARE_LIT)
		{
			self.enemy = self.oldenemy;
			HuntTarget();
		}
		else
		{
			if (self.movetarget)
			{
				self.th_walk();
			}
			else
			{
				self.th_stand();
			}
			return;
		}
	}
	self.show_hostile = time + TF_FLARE_OFF;
	enemy_vis = visible(self.enemy);
	if (enemy_vis)
	{
		self.search_time = time + 5;
	}
	if (coop && self.search_time < time)
	{
		if (FindTarget())
		{
			return;
		}
	}
	enemy_infront = infront(self.enemy);
	enemy_range = range(self.enemy);
	enemy_yaw = vectoyaw(self.enemy.origin - self.origin);
	if (self.attack_state == 4)
	{
		ai_run_missile();
		return;
	}
	if (self.attack_state == 3)
	{
		ai_run_melee();
		return;
	}
	if (CheckAnyAttack())
	{
		return;
	}
	if (self.attack_state == 2)
	{
		ai_run_slide();
		return;
	}
	movetogoal(dist);
};

/* This is NOT in this version of MegaTF (it's part of XTF which I used in MegaTF United)
// XTF AI_TARGET
float (float rangeDist, float typeFlag) AI_Target =
{
	local entity client;
	local entity te;
	local entity targetList;
	local float r;
	local float gotone;

	r = TF_FLARE_LIT;
	gotone = TF_FLARE_LIT;
	targetList = buildTargetList (rangeDist);
	targetList = sortListFrom (targetList);
	while (((targetList.classname != "listTerminator") && (targetList.classname != "worldspawn")))
	{
		gotone = TF_FLARE_OFF;
		if (!targetList)
		{
			gotone = TF_FLARE_LIT;
		}
		if (teamplay)
		{
			if (((targetList.team_no == self.team_no) && (self.team_no != TF_FLARE_LIT)))
			{
				gotone = TF_FLARE_LIT;
			}
			if (((targetList.undercover_team == self.team_no) && (self.team_no != TF_FLARE_LIT)))
			{
				gotone = TF_FLARE_LIT;
			}
		}
		if (((targetList == self.real_owner) || (targetList == self.owner)))
		{
			gotone = TF_FLARE_LIT;
		}
		if (targetList.is_feigning)
		{
			gotone = TF_FLARE_LIT;
		}
		if ((targetList.flags & 128))
		{
			gotone = TF_FLARE_LIT;
		}
		if ((targetList.items & 524288))
		{
			gotone = TF_FLARE_LIT;
		}
		if ((targetList.deadflag != TF_FLARE_LIT))
		{
			gotone = TF_FLARE_LIT;
		}
		r = vlen ((self.origin - targetList.origin));
		if ((r > rangeDist))
		{
			gotone = TF_FLARE_LIT;
		}
		r = range (targetList);
		if (((r == 3) && (rangeDist <= 1000)))
		{
			gotone = TF_FLARE_LIT;
		}
		if ((typeFlag == TF_FLARE_LIT))
		{
			if (((r == TF_FLARE_OFF) && (rangeDist >= 120)))
			{
				if (((targetList.show_hostile < time) && !infront (targetList)))
				{
					gotone = TF_FLARE_LIT;
				}
			}
			else
			{
				if (((r == 2) && (rangeDist >= 500)))
				{
					if (!infront (targetList))
					{
						gotone = TF_FLARE_LIT;
					}
				}
			}
		}
		if (!visible (targetList))
		{
			gotone = TF_FLARE_LIT;
		}
		if (gotone)
		{
			self.enemy = targetList;
			self.goalentity = targetList;
			return (gotone);
		}
		targetList = targetList.chain;
		if ((targetList.classname == "worldspawn"))
		{
			dprint ("Worldspawn terminator");
		}
	}
	return (gotone);
};
// END XTF
*/