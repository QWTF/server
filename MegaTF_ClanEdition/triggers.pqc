entity stemp, otemp, s, old;

void() trigger_reactivate = 
{
	self.solid = TF_FLARE_OFF;
};

void() multi_wait = 
{
	if (self.max_health)
	{
		self.health = self.max_health;
		self.takedamage = TF_FLARE_OFF;
		self.solid = 2;
	}
};

void() multi_trigger = 
{
	if (self.nextthink > time)
	{
		return;
	}
	if (self.classname == "trigger_secret")
	{
		if (self.enemy.classname != "player")
		{
			return;
		}
		found_secrets = found_secrets + TF_FLARE_OFF;
		WriteByte(2, 28);
	}
	if (self.noise)
	{
		sound(self, 2, self.noise, TF_FLARE_OFF, TF_FLARE_OFF);
	}
	self.takedamage = TF_FLARE_LIT;
	activator = self.enemy;
	SUB_UseTargets();
	if (self.wait > TF_FLARE_LIT)
	{
		self.think = multi_wait;
		self.nextthink = time + self.wait;
	}
	else
	{
		self.touch = SUB_Null;
		self.nextthink = time + 0.1;
		self.think = SUB_Remove;
	}
};

void() multi_killed = 
{
	self.enemy = damage_attacker;
	multi_trigger();
};

void() multi_use = 
{
	self.enemy = activator;
	multi_trigger();
};

void() multi_touch = 
{
	local entity te;
	if (other.classname != "player")
	{
		return;
	}
	if (!Activated(self, other))
	{
		if (self.else_goal != TF_FLARE_LIT)
		{
			te = Findgoal(self.else_goal);
			if (te)
			{
				DoResults(te, other, self.goal_result & 2);
			}
		}
		return;
	}
	if (self.movedir != '0 0 0')
	{
		makevectors(other.angles);
		if (v_forward * self.movedir < TF_FLARE_LIT)
		{
			return;
		}
	}
	self.enemy = other;
	multi_trigger();
};

void() trigger_multiple = 
{
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	if (self.sounds == TF_FLARE_OFF)
	{
		precache_sound("misc/secret.wav");
		self.noise = "misc/secret.wav";
	}
	else
	{
		if (self.sounds == 2)
		{
			precache_sound("misc/talk.wav");
			self.noise = "misc/talk.wav";
		}
		else
		{
			if (self.sounds == 3)
			{
				precache_sound("misc/trigger1.wav");
				self.noise = "misc/trigger1.wav";
			}
		}
	}
	if (!(self.wait))
	{
		self.wait = 0.2;
	}
	self.use = multi_use;
	InitTrigger();
	if (self.health)
	{
		if (self.spawnflags & TF_FLARE_OFF)
		{
			objerror("health and notouch don't make sense\n");
		}
		self.max_health = self.health;
		self.th_die = multi_killed;
		self.takedamage = TF_FLARE_OFF;
		self.solid = 2;
		setorigin(self, self.origin);
	}
	else
	{
		if (!(self.spawnflags & TF_FLARE_OFF))
		{
			self.touch = multi_touch;
		}
	}
};

void() trigger_once = 
{
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	self.wait = -1;
	trigger_multiple();
};

void() trigger_relay = 
{
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	self.use = SUB_UseTargets;
};

void() trigger_secret = 
{
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	total_secrets = total_secrets + TF_FLARE_OFF;
	self.wait = -1;
	if (!(self.message))
	{
		self.message = "You found a secret area!";
	}
	if (!(self.sounds))
	{
		self.sounds = TF_FLARE_OFF;
	}
	if (self.sounds == TF_FLARE_OFF)
	{
		precache_sound("misc/secret.wav");
		self.noise = "misc/secret.wav";
	}
	else
	{
		if (self.sounds == 2)
		{
			precache_sound("misc/talk.wav");
			self.noise = "misc/talk.wav";
		}
	}
	trigger_multiple();
};

void() counter_use = 
{
	self.count = self.count - TF_FLARE_OFF;
	if (self.count < TF_FLARE_LIT)
	{
		return;
	}
	if (self.count != TF_FLARE_LIT)
	{
		if (activator.classname == "player" && (self.spawnflags & TF_FLARE_OFF) == TF_FLARE_LIT)
		{
			if (self.count >= 4)
			{
				CenterPrint(activator, "There are more to go...");
			}
			else
			{
				if (self.count == 3)
				{
					CenterPrint(activator, "Only 3 more to go...");
				}
				else
				{
					if (self.count == 2)
					{
						CenterPrint(activator, "Only 2 more to go...");
					}
					else
					{
						CenterPrint(activator, "Only 1 more to go...");
					}
				}
			}
		}
		return;
	}
	if (activator.classname == "player" && (self.spawnflags & TF_FLARE_OFF) == TF_FLARE_LIT)
	{
		CenterPrint(activator, "Sequence completed!");
	}
	self.enemy = activator;
	multi_trigger();
};

void() trigger_counter = 
{
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	self.wait = -1;
	if (!(self.count))
	{
		self.count = 2;
	}
	self.use = counter_use;
};

void() play_teleport = 
{
	local float v;
	local string tmpstr;
	v = random() * 5;
	if (v < TF_FLARE_OFF)
	{
		tmpstr = "misc/r_tele1.wav";
	}
	else
	{
		if (v < 2)
		{
			tmpstr = "misc/r_tele2.wav";
		}
		else
		{
			if (v < 3)
			{
				tmpstr = "misc/r_tele3.wav";
			}
			else
			{
				if (v < 4)
				{
					tmpstr = "misc/r_tele4.wav";
				}
				else
				{
					tmpstr = "misc/r_tele5.wav";
				}
			}
		}
	}
	sound(self, 2, tmpstr, TF_FLARE_OFF, TF_FLARE_OFF);
	remove(self);
};

void(vector org) spawn_tfog = 
{
	s = spawn();
	s.origin = org;
	s.nextthink = time + 0.2;
	s.think = play_teleport;
	WriteByte(4, 23);
	WriteByte(4, 11);
	WriteCoord(4, org_x);
	WriteCoord(4, org_y);
	WriteCoord(4, org_z);
	multicast(org, TF_FLARE_OFF);
};

void() tdeath_touch = 
{
	if (other == self.owner)
	{
		return;
	}
	if (other.classname == "player")
	{
		if (other.invincible_finished > time)
		{
			self.classname = "teledeath2";
		}
		if (self.owner.classname != "player")
		{
			T_Damage(self.owner, self, self, 5000);
			return;
		}
	}
	if (other.health)
	{
		T_Damage(other, self, self, 5000);
	}
};

void(vector org, entity death_owner) spawn_tdeath = 
{
	local entity death;
	death = spawn();
	death.classname = "teledeath";
	death.movetype = TF_FLARE_LIT;
	death.solid = TF_FLARE_OFF;
	death.angles = '0 0 0';
	setsize(death, death_owner.mins - '1 1 1', death_owner.maxs + '1 1 1');
	setorigin(death, org);
	death.touch = tdeath_touch;
	death.nextthink = time + 0.2;
	death.think = SUB_Remove;
	death.owner = death_owner;
	force_retouch = 2;
};

void() teleport_touch = 
{
	local entity t;
	local entity te;
	local vector org;
	if (self.targetname)
	{
		if (self.nextthink < time)
		{
			return;
		}
	}
	if (self.spawnflags & TF_FLARE_OFF)
	{
		if (other.classname != "player")
		{
			return;
		}
	}
	if (!Activated(self, other))
	{
		if (self.else_goal != TF_FLARE_LIT)
		{
			te = Findgoal(self.else_goal);
			if (te)
			{
				DoResults(te, other, self.goal_result & 2);
			}
		}
		return;
	}
	if (other.health <= TF_FLARE_LIT || other.solid != 3)
	{
		return;
	}
	SUB_UseTargets();
	spawn_tfog(other.origin);
	t = find(world, targetname, self.target);
	if (!t)
	{
		objerror("couldn't find target");
	}
	makevectors(t.mangle);
	org = t.origin + 32 * v_forward;
	spawn_tfog(org);
	spawn_tdeath(t.origin, other);
	if (!(other.health))
	{
		other.origin = t.origin;
		other.velocity = v_forward * other.velocity_x + v_forward * other.velocity_y;
		return;
	}
	setorigin(other, t.origin);
	other.angles = t.mangle;
	if (other.classname == "player")
	{
		if (other.weapon == TF_FLARE_OFF && other.hook_out)
		{
			sound(other, TF_FLARE_OFF, "weapons/bounce2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
			other.on_hook = TF_FLARE_LIT;
			other.hook_out = TF_FLARE_LIT;
			other.fire_held_down = TF_FLARE_LIT;
			other.weaponframe = TF_FLARE_LIT;
			other.attack_finished = time + 0.75;
		}
		other.fixangle = TF_FLARE_OFF;
		other.teleport_time = time + 0.7;
		if (other.flags & 512)
		{
			other.flags = other.flags - 512;
		}
		other.velocity = v_forward * 300;
	}
	other.flags = other.flags - (other.flags & 512);
};

void() info_teleport_destination = 
{
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	self.mangle = self.angles;
	self.angles = '0 0 0';
	self.model = "";
	self.origin = self.origin + '0 0 27';
	if (!(self.targetname))
	{
		objerror("no targetname");
	}
};

void() teleport_use = 
{
	self.nextthink = time + 0.2;
	force_retouch = 2;
	self.think = SUB_Null;
};

void() trigger_teleport = 
{
	local vector o;
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	InitTrigger();
	self.touch = teleport_touch;
	if (!(self.target))
	{
		objerror("no target");
	}
	self.use = teleport_use;
	if (!(self.spawnflags & 2))
	{
		precache_sound("ambience/hum1.wav");
		o = (self.mins + self.maxs) * 0.5;
		ambientsound(o, "ambience/hum1.wav", 0.5, 3);
	}
};

void() trigger_skill_touch = 
{
	local entity te;
	if (other.classname != "player")
	{
		return;
	}
	if (!Activated(self, other))
	{
		if (self.else_goal != TF_FLARE_LIT)
		{
			te = Findgoal(self.else_goal);
			if (te)
			{
				DoResults(te, other, self.goal_result & 2);
			}
		}
		return;
	}
	cvar_set("skill", self.message);
};

void() trigger_setskill = 
{
	dremove(self);
	return;
};

void() trigger_onlyregistered_touch = 
{
	local entity te;
	if (other.classname != "player")
	{
		return;
	}
	if (!Activated(self, other))
	{
		if (self.else_goal != TF_FLARE_LIT)
		{
			te = Findgoal(self.else_goal);
			if (te)
			{
				DoResults(te, other, self.goal_result & 2);
			}
		}
		return;
	}
	if (self.attack_finished > time)
	{
		return;
	}
	self.attack_finished = time + 2;
	if (cvar("registered"))
	{
		self.message = "";
		SUB_UseTargets();
		remove(self);
	}
	else
	{
		if (self.message != "")
		{
			CenterPrint(other, self.message);
			sound(other, 4, "misc/talk.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
	}
};

void() trigger_onlyregistered = 
{
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	precache_sound("misc/talk.wav");
	InitTrigger();
	self.touch = trigger_onlyregistered_touch;
};

void() hurt_on = 
{
	self.solid = TF_FLARE_OFF;
	self.nextthink = -1;
};

void() hurt_touch = 
{
	local entity te;
	if (other.takedamage)
	{
		if (!Activated(self, other))
		{
			if (self.else_goal != TF_FLARE_LIT)
			{
				te = Findgoal(self.else_goal);
				if (te)
				{
					DoResults(te, other, self.goal_result & 2);
				}
			}
			return;
		}
		self.solid = TF_FLARE_LIT;
		deathmsg = 36;
		TF_T_Damage(other, self, self, self.dmg, TF_FLARE_OFF, TF_FLARE_LIT);
		self.think = hurt_on;
		self.nextthink = time + TF_FLARE_OFF;
	}
};

void() trigger_hurt = 
{
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	InitTrigger();
	self.touch = hurt_touch;
	if (!(self.dmg))
	{
		self.dmg = 5;
	}
};

void() trigger_push_touch = 
{
	local entity te;
	if (!Activated(self, other))
	{
		if (self.else_goal != TF_FLARE_LIT)
		{
			te = Findgoal(self.else_goal);
			if (te)
			{
				DoResults(te, other, self.goal_result & 2);
			}
		}
		return;
	}
	if (other.classname == "grenade" || other.classname != "player")
	{
		if (other.last_used < time)
		{
			sound(other, TF_FLARE_LIT, "weapons/launch.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		other.last_used = time + 3;
		other.velocity = self.speed * self.movedir * 10;
		other.avelocity = '0 0 0';
		other.angles = self.movedir;
	}
	else
	{
		if (other.health > TF_FLARE_LIT && !(self.armorclass))
		{
			other.velocity = self.speed * self.movedir * 10;
			if (other.classname == "player")
			{
				if (other.fly_sound < time)
				{
					other.fly_sound = time + 1.5;
					if (!(self.spawnflags & 2))
					{
						sound(other, TF_FLARE_LIT, "ambience/windfly.wav", TF_FLARE_OFF, TF_FLARE_OFF);
					}
				}
			}
		}
	}
	if (self.spawnflags & TF_FLARE_OFF)
	{
		dremove(self);
	}
};

void() trigger_push = 
{
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	InitTrigger();
	precache_sound("ambience/windfly.wav");
	self.touch = trigger_push_touch;
	if (!(self.speed))
	{
		self.speed = 1000;
	}
};

// Jumper code

void () trigger_jumper_touch =
{
	local entity _l_7024;

	if (!Activated (self, other))
	{
		if ((self.else_goal != 0.000000))
		{
			_l_7024 = Findgoal (self.else_goal);
			if (_l_7024)
			{
				DoResults (_l_7024, other, (self.goal_result & 2.000000));
			}
		}
		return;
	}
	if (((other.classname == "grenade") || (other.classname != "player")))
	{
		return;
	}
	else
	{
		if (((other.health > 0.000000) && !self.armorclass))
		{
			other.velocity_z = (self.speed * 7.000000);
			if ((other.classname == "player"))
			{
				if ((other.fly_sound < time))
				{
					other.fly_sound = (time + 1.500000);
					if (!(self.spawnflags & 2.000000))
					{
						sound (other, 0.000000, "misc/boing.wav", 1.000000, 1.000000);
					}
				}
			}
		}
	}
	if ((self.spawnflags & 1.000000))
	{
		dremove (self);
	}
};

void () trigger_jumper =
{
	if ((CheckExistence () == 0.000000))
	{
		dremove (self);
		return;
	}
	InitTrigger ();
	precache_sound ("misc/boing.wav");
	self.touch = trigger_jumper_touch;
	if (!self.speed)
	{
		self.speed = 1000.000000;
	}
};

// End jumper code

void() trigger_monsterjump_touch = 
{
	if ((other.flags & (32 | TF_FLARE_OFF | 2)) != 32)
	{
		return;
	}
	other.velocity_x = self.movedir_x * self.speed;
	other.velocity_y = self.movedir_y * self.speed;
	if (!(other.flags & 512))
	{
		return;
	}
	other.flags = other.flags - 512;
	other.velocity_z = self.height;
};

void() trigger_monsterjump = 
{
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	if (!(self.speed))
	{
		self.speed = 200;
	}
	if (!(self.height))
	{
		self.height = 200;
	}
	if (self.angles == '0 0 0')
	{
		self.angles = '0 360 0';
	}
	InitTrigger();
	self.touch = trigger_monsterjump_touch;
};

